// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]

  // App-specific fields
  plan                  String    @default("free") // "free" or "pro"
  isAdmin               Boolean   @default(false)
  isVerified            Boolean   @default(false)
  isOG                  Boolean   @default(false)

  // 2FA
  twoFactorEnabled      Boolean   @default(false)
  twoFactorSecret       String?

  // Relations
  profile               Profile?
  theme                 Theme?
  subscription          Subscription?
  links                 Link[]
  leads                 Lead[]
}

model Profile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  username              String    @unique
  bio                   String?

  // Settings
  showEmailForm         Boolean   @default(false)
  enableMediaKit        Boolean   @default(false)
}

model Theme {
    id                  String @id @default(cuid())
    userId              String @unique
    user                User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    backgroundColor     String @default("#ffffff")
    backgroundImageUrl  String?
    buttonStyle         String @default("rounded")
    fontFamily          String @default("Inter")
}

model Subscription {
    id                      String      @id @default(cuid())
    userId                  String      @unique
    user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    stripeSubscriptionId    String      @unique
    status                  String      // e.g., "active", "canceled", "past_due"
    plan                    String      // e.g., "pro"

    createdAt               DateTime    @default(now())
    currentPeriodEnd        DateTime
}

model Link {
  id                    String    @id @default(cuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  title                 String
  url                   String
  orderIndex            Int
  type                  String    @default("standard") // "standard", "product", "tip_jar", "scheduling"

  // Product-specific fields
  productPrice          String?
  productImageUrl       String?

  // Analytics
  clicks                Click[]
}

model Click {
    id                  String      @id @default(cuid())
    linkId              String
    link                Link        @relation(fields: [linkId], references: [id], onDelete: Cascade)

    createdAt           DateTime    @default(now())
    country             String?
    city                String?
    referrer            String?
}

model Lead {
    id                  String      @id @default(cuid())
    userId              String
    user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    email               String
    createdAt           DateTime    @default(now())
}


// --- NextAuth.js Models ---
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
